pipeline {
    agent any
    environment{
        KEY=credentials('sonar')
        sonar_url = "http://52.91.78.214:9000"
        }
    stages {
        stage('git scm') {
            steps {
                git 'https://github.com/Chaitanya305/demo-nodejs.git'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool name: 'sonar', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
                    withSonarQubeEnv('sonar') {
                        // Run Sonar Scanner for Node.js project
                        sh '''
                        # Run the Sonar Scanner with Node.js-specific parameters
                        npx sonar-scanner \
                          -D sonar.projectKey=demo-nodejs \
                          -D sonar.qualityProfile=Sonarway\
                          -D sonar.language=js \
                          -D sonar.javascript.lcov.reportPaths=coverage/lcov.info \
                          -D sonar.projectVersion=1.0.0 \
                          -D sonar.sourceEncoding=UTF-8 \
                          -D sonar.host.url=${sonar_url}
                        '''
                    }
                }
            }
        }
        stage("seting QG"){
            steps{
                sh '''curl -u ${sonar}: ${sonar_url}/api/qualitygates/select \
                -d "gateId=AZOz4xJsNKyJdp6BVwcv&projectKey=demo-nodejs"
                '''
            }
        }
        stage("SonarQube Quality Gate Check") {
            steps {
                script {
                def qualityGate = waitForQualityGate()
                    
                    if (qualityGate.status != 'OK') {
                        echo "${qualityGate.status}"
                        error "Quality Gate failed: ${qualityGate.status}"
                    }
                    else {
                        echo "${qualityGate.status}"
                        echo "SonarQube Quality Gates Passed"
                    }
                }
            }
        }
    }
    post {
      always {
        echo "Cleaning up ${WORKSPACE}"
        // clean up our workspace 
        deleteDir()
        // clean up tmp directory 
        dir("${workspace}@tmp") {
          deleteDir()
        }
      }
    }
}
